---
title: "Randomization"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Learn how to randomize CRD and RCBD in R  
- Learn how to create plot layouts with them  

# Setup  
Here is where we load the packages we will use.  
```{r setup}
#This coding step happens before doing the analysis on CRD and RCBD.
#We do this before starting the experiment but after finalizing the trts and all.
# Loading packages
library(tidyverse) # for data wrangling and plotting
```

# Treatment design  
Keeping with the same motivational example we've been using, our treatment design is:  

-   2-way factorial\
-   N fertilizer rates: 0, 100, 200 kg N/ha\
-   K fertilizer rates: 0, 30, 60 kg K/ha\
-   3 x 3 = **9 treatment combinations**

Let's define our treatments above in an object.  
```{r}
trts <- crossing(nrate_kgha = c(0,100,200),
                 krate_kgha = c(0,30,60)) %>% 
#crossing will make all the possible combination between treatments no matter how many we have.
        mutate(trtnum = 1:nrow(.)) %>% 
#nrow function will be run on the whole data to get total number of row and make a column other if we want to specify we can say 1:9 but nrow is better option.
      mutate(trtname = paste0(nrate_kgha, "+", krate_kgha))

#we dont have replications yet.


  trts
```


# CRD  
## Randomization  
Since it is a CRD, randomization is unrestricted.  

```{r crd_rand}
# Setting seed to get same randomization result every time. Set seed is setting a number randomly on a table that R already has.
set.seed(404)

crd_rand  <- crossing(trtname = trts$trtname,
              rep = 1:4) %>% 
  # Since plots are organized without a structure, let's number them 1 through 36. In this crossing, we are adding reps whereas in the previous one we only had combinations.
mutate(plot = 1:nrow(.)) %>% 
  # Randomizing trtname to plots, without restrictions 
mutate(plot = sample(plot)) %>% 
 # if we can run the last line we will have different sequence each time from the table hwoever if we run from set seed then we will have same number everytume.
  arrange(plot)
#we are arranging the plot number in ascending order
  
  
  
  
crd_rand
```

## Plot layout  
Let's create a structure for plot layout in different rows and columns.  
The number of rows and columns could be decided based on the actual field layout. For ex., do you have enough space for 9 columns and 4 rows, or 9 rows and 4 columns?  

Let's assume we have space for 9 rows and 4 columns.  

```{r crd_layout}
crd_layout <- crd_rand %>% 
  # Defining number of rows and columns in the field for plotting purposes
mutate(row = rep(1:4, each = 9)) %>% 
  # Creating plot and trtname labels for plotting
mutate(col = rep(seq(from = 1,
                 to = 9,
                 by = 1), times = 4
                 )) %>% 
#there is a difference when using each and times. All of this is for visualisation purposes and not for randomization yet.
mutate(lab = paste0(plot, "\n", trtname))

#\n breaks the text on the geomplot

crd_layout
```

Now, let's plot it.
```{r crd map}
ggplot(data = crd_layout,
       aes(x = row, y = -col))+geom_tile(aes(fill = trtname),
                                        color = "black",
                                        show.legend = F,
                                        ) +
  scale_fill_viridis_d()+
  geom_text(aes(label = lab), vjust = 0.5) +
  labs(title = "CRD randomization of a 3x3 factorial (9 treatments)") +
  theme(plot.title = element_text(hjust = 0.5))
  
  #the columns are starting from bottom up and in order to change that we add negative with col.

```

Notice how due to unrestricted randomization, we had the replication of some treatments falling in neighboring plots, e.g. plots 12 and 13 have the same treatment.  

```{r}
crd_rand %>% 
  # Retrieving other information contained in trts. joints (left here) is super important, there is one common column title and values we can join these both. I guess it depends where the common column is to decide whether left or right join.
left_join(trts) %>% 
  # Rearranging columns  
dplyr::select(plot, rep, trtname, trtnum,
              nrate_kgha, krate_kgha) %>% 
  write_csv("../output/crd_randomization_table.csv")
```

```{r}
ggsave("../output/crd_layoutmap.png",
       width = 7,
       height = 5,
       bg = "white")
```


# RCBD  
## Randomization  
```{r rcbd_rand}
# Setting seed to get same randomization result every time
set.seed(404)

rcbd_rand <- crossing(trtname = trts$trtname,
                      rep = 1:4) %>% 
  arrange(rep) %>% 
#in rcbd, rep/block is important cuz we are randomizing within each block which was not the case in crd where we were randomizing as whole.
group_by(rep) %>% 
mutate(trtname = sample(trtname)) %>% 
#we are doing something different i.e plot number.
  mutate(plot = (rep*100) + 1:9) %>% 
  #1:9 is only working properly because we have grouped by otherwise it would go to 36(crd). either shuffle plot number or trtnumber for different designs. now lets ungroup so that it does not go forward and we already have what we wanted.
  ungroup()



rcbd_rand
```

Let's check if in fact each treatment appears once per block.  
```{r}
rcbd_rand  %>% 
  group_by(rep, trtname) %>% 
  tally() %>% 
#how to check each trt is showing once in a block. n is showing 1 for all and if we have huge data set and can not go through all of it then we will use additional function and ask R to show only whihc is higher than 1.
filter(n >1)

#how many rows were there.
rcbd_rand  %>% 
  group_by(rep) %>% 
  tally()
```

## Plot layout  
```{r rcbd_layout}
rcbd_layout <- rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 4 #total number of blocks
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(plot, "\n", trtname))

rcbd_layout
```

Now, let's plot it.
```{r rcbd map}
ggplot(data = rcbd_layout, aes(x = row, 
                               y = -col))+
  geom_tile(aes(fill = trtname),
            color = "black",
            show.legend = F
  )+
  scale_fill_viridis_d()+
  geom_text(aes(label = plot), fontface = "bold", vjust = -.3)+
  geom_text(aes(label = trtname), vjust = 1)+
  labs(title = "RCBD randomization of a 3 x 3 factorial (9 treatments)") +
  theme_void()+
  theme(plot.title = element_text(hjust = 0.5))

```

Notice how now each treatment appears only once per column, where column represents the reps or blocks.  

# Exporting to file  
If this is in fact your study, you may want to export both the field randomization table AND the layout map.  

Let's do that below for the RCBD example.  

```{r}
rcbd_rand %>% 
  # Retrieving other information contained in trts. joints (left here) is super important, there is one common column title and values we can join these both. I guess it depends where the common column is to decide whether left or right join.
left_join(trts) %>% 
  # Rearranging columns  
dplyr::select(plot, rep, trtname, trtnum,
              nrate_kgha, krate_kgha) %>% 
  write_csv("../output/rcbd_randomization_table.csv")

```

`ggsave()` will save the last plot created in the session, even if from an above chunk. Since the last plot we created was the RCBD layout, we can just go ahead and call ggsave here.  

```{r}
ggsave("../output/rcbd_layoutmap.png",
       width = 7,
       height = 5,
       bg = "white")
```


